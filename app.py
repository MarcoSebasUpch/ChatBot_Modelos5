import os
import streamlit as st
from groq import Groq
from dotenv import load_dotenv

st.set_page_config(page_title="Epicall ChatBot", page_icon="üß†", layout="centered")

# Cargar la API key de forma segura
try:
    load_dotenv()  # Carga variables desde .env si existe (entorno local)
    API_KEY = os.getenv("GROQ_API_KEY")  #para Groq; usar "OPENAI_API_KEY" si es OpenAI
except:
    API_KEY = st.secrets["GROQ_API_KEY"]

os.environ["GROQ_API_KEY"] = API_KEY
client = Groq()  # Cliente para invocar la API de Groq

# Inicializar el historial de chat en la sesi√≥n
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []  # lista de dicts: {"role": ..., "content": ...}

SYSTEM_PROMPT = """
Eres EPICALL_IA, un asistente conversacional de Epicall (startup de salud digital enfocada en epilepsia).
Tu objetivo es informar con claridad y empat√≠a lo que son las epilepsias, habla sobre c√≥mo afectan al paciente y a la familia.
Evita los tecnicismo, se claro y breve.
Ten en cuenta que la startup se basa en que:
- Epicall es un dispositivo de monitoreo y alertas para eventos compatibles con crisis epil√©ptica.
- Sus beneficios clave son:
  - Monitoreo continuo del estado de la persona.
  - Emisi√≥n de alertas autom√°ticas a familiares o cuidadores en caso se detecte una convulsi√≥n prolongada (m√°s de 5 minutos).
  - Registro hist√≥rico de eventos para mejorar el seguimiento m√©dico.
  - La privacidad y seguridad de los datos est√° garantizada.
  - Es f√°cil de usar, ya que consta del dispositivo wearable que es una prenda y de una app
  - Epicall se distingue como el √∫nico wearable m√©dico en el pa√≠s especializado en la monitorizaci√≥n de crisis epil√©pticas t√≥nico‚Äìcl√≥nicas y la emisi√≥n de alertas ante episodios prolongados.
- Epicall ofrece tranquilidad a las familias al reducir tiempos de respuesta en emergencias.
- En caso de ventas indica que se realiza en todo el Per√∫, siendo tu sede principal en Lima, desde har√°s los env√≠os. 
- Permites brindar un soporte t√©cnico, el dispositivo es electr√≥nico, por lo que debes dar recomendaciones b√°sicas. Cuando las termines de dar indica que, en casos m√°s espec√≠ficos, llamar al 966990206.

Ten en cuenta que solo vendes el dispositivo, no puedes dar consejos m√©dicos ni alg√∫n tratamiento, Epicall no reemplaza la atenci√≥n m√©dica, sino que la complementa.
"""

st.title("üß† Epicall IA - Tu Aliado en Epilepsia")
st.write("Monitoreo continuo y alertas inteligentes para cuidar a quienes m√°s quieres. Pregunta lo que desees.")

for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

user_input = st.chat_input("Escribe tu pregunta aqu√≠...")

if user_input:
    # Mostrar el mensaje del usuario
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    # Construir mensajes para el modelo
    messages = []
    if SYSTEM_PROMPT:
        messages.append({"role": "system", "content": SYSTEM_PROMPT})
    messages.extend(st.session_state.chat_history)

    # Llamar a la API **solo** si hay user_input (evita NameError)
    try:
        response = client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=messages,
            temperature=0.7,
        )
        respuesta_texto = response.choices[0].message.content  # objeto, no dict
    except Exception as e:
        respuesta_texto = f"Lo siento, ocurri√≥ un error al llamar a la API: `{e}`"

    # Mostrar respuesta del asistente
    with st.chat_message("assistant"):
        st.markdown(respuesta_texto)

    # Guardar en historial
    st.session_state.chat_history.append({"role": "assistant", "content": respuesta_texto})





